apply plugin: 'kotlin-platform-js'
apply plugin: "com.moowork.node"

node {
    version = nodeVersion
    download = true
}

dependencies {
    compile libraries.kotlin_stdlib_js
    compile libraries.kotlin_serialization_js
    compile libraries.kotlin_coroutines_js
    compile project(':common-js')
    compile project(':fp')
    testCompile libraries.kotlin_test_js
}

repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

def outputDir = "${projectDir}/node_modules"

task populateNodeModules(type: Copy, dependsOn: [compileKotlin2Js, compileTestKotlin2Js]) {
    from compileKotlin2Js.destinationDir
    configurations.compile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }
    into "${outputDir}"

    from compileKotlin2Js.destinationDir
    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }
    into "${outputDir}"
}

task installQunit(type: NpmTask) {
    inputs.property('qunitVersion', qunitVersion)
    outputs.dir file('node_modules/qunit')

    args = ['install', "qunit@${qunitVersion}"]
}

task runQunit(type: NodeTask, dependsOn: [populateNodeModules, installQunit]) {
    script = file('node_modules/qunit/bin/qunit')
    args = [projectDir.toPath().relativize(file(compileTestKotlin2Js.outputFile).toPath())]
}

assemble.dependsOn populateNodeModules
test.dependsOn runQunit
